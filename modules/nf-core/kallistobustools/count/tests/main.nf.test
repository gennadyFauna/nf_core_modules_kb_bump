nextflow_process {

    name "Test Process KALLISTOBUSTOOLS_COUNT"
    script "../main.nf"
    process "KALLISTOBUSTOOLS_COUNT"

    tag "modules"
    tag "modules_nfcore"
    tag "kallistobustools"
    tag "kallistobustools/count"

    setup {
        run("KALLISTOBUSTOOLS_REF") {
            script "../../ref/main.nf"
            process {
                """
                input[0] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true)
                input[1] = file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.gtf', checkIfExists: true)
                input[2] = "standard"
                """
            }
        }
    }

    test("genome.fasta + genome.gtf + '10X3' + 'standard'") {

        when {
            process {
                """
                input[0] = Channel.of(
                    [
                        [id:'test'], // meta map
                        [
                        file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_10k_pbmc_cmo_gex1_fastq_1_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_10k_pbmc_cmo_gex1_fastq_2_gz'], checkIfExists: true)
                        ]
                    ]
                )
                input[1] = KALLISTOBUSTOOLS_REF.out.index
                input[2] = KALLISTOBUSTOOLS_REF.out.t2g
                input[3] = KALLISTOBUSTOOLS_REF.out.cdna_t2c.ifEmpty{ [] }   // when empty the module doesn't run unless something is passed.
                input[4] = KALLISTOBUSTOOLS_REF.out.intron_t2c.ifEmpty{ [] } // when empty the module doesn't run unless something is passed.
                input[5] = "10XV3"
                input[6] = "standard"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    process.out.matrix,
                    path(process.out.count.get(0).get(1)).list().findAll { file(it.toString()).name != "run_info.json" && file(it.toString()).name != "kb_info.json" },
                    file(path(process.out.count.get(0).get(1)).list().find { file(it.toString()).name == "kb_info.json" }.toString()).readLines()[2..10],
                    file(path(process.out.count.get(0).get(1)).list().find { file(it.toString()).name == "run_info.json" }.toString()).readLines()[0..9]
                    ).match()
                }
            )
        }
    }

    test("genome.fasta + genome.gtf + '10X3' + 'standard' - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = Channel.of(
                    [
                        [id:'test'], // meta map
                        [
                        file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_10k_pbmc_cmo_gex1_fastq_1_gz'], checkIfExists: true),
                        file(params.test_data['homo_sapiens']['10xgenomics']['cellranger']['test_10x_10k_pbmc_cmo_gex1_fastq_2_gz'], checkIfExists: true)
                        ]
                    ]
                )
                input[1] = KALLISTOBUSTOOLS_REF.out.index
                input[2] = KALLISTOBUSTOOLS_REF.out.t2g
                input[3] = KALLISTOBUSTOOLS_REF.out.cdna_t2c.ifEmpty{ [] }   // when empty the module doesn't run unless something is passed.
                input[4] = KALLISTOBUSTOOLS_REF.out.intron_t2c.ifEmpty{ [] } // when empty the module doesn't run unless something is passed.
                input[5] = "10XV3"
                input[6] = "standard"
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
